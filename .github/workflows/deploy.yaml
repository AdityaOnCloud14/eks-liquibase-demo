#add logic for cleanup the update job pods or check if there were any existing pods, will have to delete those 
#kubectl delete liquibase-update-job -n liquibase-demo
#
#for lint checks follow the following document 
# https://docs.sqlfluff.com/en/stable/reference/rules.html#bundle-layout
#also add a detailed readme.md file 

#instead of having seprate job to updatE DB can we have just the liquibase commands run after the init conatiners clone the repo and mount it with the volume 
#can we have a seperte tab where we can mention a specific command other than just normal update and rollback and the pipeline should run it and do the necessary changes.


name: Liquibase Migration Pipeline

on: [push, pull_request]

jobs:
  liquibase:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repo
      - name: Checkout
        uses: actions/checkout@v2

      # 2. Lint-check the SQL files (SQLFluff)
      - name: Lint SQL
        run: |
          pip install sqlfluff
          # Lint all .sql files in the liquibase/ directory
          sqlfluff lint liquibase/ --dialect postgres

      # 3. Configure AWS Credentials (set these secrets in your repo)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 4. Update kubeconfig for EKS (replace with your cluster name)
      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name my-lb-initcluster

      # 5. Deploy DB credentials & Postgres
      - name: Deploy DB Credentials & Postgres
        run: |
          kubectl apply -f manifests/db-credentials-secret.yaml -n liquibase-demo
          kubectl apply -f manifests/postgres-deployment.yaml -n liquibase-demo
          kubectl apply -f manifests/postgres-service.yaml -n liquibase-demo

      # 6. Deploy Liquibase Job
      - name: Deploy Liquibase Update Job
        run: |
          kubectl apply -f manifests/liquibase-job.yaml -n liquibase-demo
          kubectl wait --for=condition=complete job/liquibase-init-job -n liquibase-demo --timeout=300s
          # Show logs
          POD=$(kubectl get pods -n liquibase-demo -l job-name=liquibase-init-job -o jsonpath="{.items[0].metadata.name}")
          echo "Liquibase Job Logs:"
          kubectl logs $POD -n liquibase-demo
