name: Liquibase Migration Pipeline

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Liquibase operation: update OR rollback'
        required: true
        default: update
      rollbackCount:
        description: 'Number of changesets to rollback (only used if operation=rollback)'
        required: false

jobs:
  liquibase:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repository (which contains your manifests and Liquibase files)
      - name: Checkout Repo
        uses: actions/checkout@v2

      # 2. Configure AWS credentials (ensure these secrets are added in GitHub)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 3. Update kubeconfig for EKS (replace "my-lb-initcluster" with your cluster name)
      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name my-lb-initcluster

      # 4. Deploy DB Credentials & PostgreSQL
      - name: Deploy DB Credentials & PostgreSQL
        run: |
          kubectl apply -f manifests/db-credentials-secret.yaml -n liquibase-demo
          kubectl apply -f manifests/postgres-deployment.yaml -n liquibase-demo
          kubectl apply -f manifests/postgres-service.yaml -n liquibase-demo

      # 5. Conditional step for Liquibase Update
      - name: Deploy Liquibase Update Job
        if: ${{ github.event.inputs.operation == 'update' }}
        run: |
          echo "Running Liquibase UPDATE"
          kubectl apply -f manifests/liquibase-job.yaml -n liquibase-demo
          kubectl wait --for=condition=complete job/liquibase-init-job -n liquibase-demo --timeout=300s
          POD=$(kubectl get pods -n liquibase-demo -l job-name=liquibase-init-job -o jsonpath="{.items[0].metadata.name}")
          echo "Liquibase Update Job Logs:"
          kubectl logs $POD -n liquibase-demo

      # 6. Conditional step for Liquibase Rollback
      - name: Deploy Liquibase Rollback Job
        if: ${{ github.event.inputs.operation == 'rollback' }}
        run: |
          echo "Running Liquibase ROLLBACK"
          # Replace the placeholder {{ROLLBACK_COUNT}} with the provided input.
          sed "s/{{ROLLBACK_COUNT}}/${{ github.event.inputs.rollbackCount }}/g" manifests/liquibase-rollback-job.yaml > manifests/liquibase-rollback-job-temp.yaml
          kubectl apply -f manifests/liquibase-rollback-job-temp.yaml -n liquibase-demo
          kubectl wait --for=condition=complete job/liquibase-rollback-job -n liquibase-demo --timeout=300s
          POD=$(kubectl get pods -n liquibase-demo -l job-name=liquibase-rollback-job -o jsonpath="{.items[0].metadata.name}")
          echo "Liquibase Rollback Job Logs:"
          kubectl logs $POD -n liquibase-demo
