name: Liquibase Multi-Environment Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment: dev, test, or prod'
        required: true
        default: dev
        type: choice
        options: [dev, test, prod]
      operation:
        description: 'Operation: update or rollbackCount'
        required: true
        default: update
        type: choice
        options: [update, rollbackCount]
      rollbackCount:
        description: 'Number of changesets to rollback (if rollbackCount)'
        required: false
        default: "1"
      target_db:
        description: 'Database name to deploy changes to'
        required: true
        default: demo_db

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Lint SQL Files with SQLFluff
        run: |
          pip3 install sqlfluff==3.2.0
          sqlfluff lint liquibase/ --dialect postgres

      - name: Set Role ARN Based on Environment
        id: role
        run: |
          case "${{ github.event.inputs.environment }}" in
            dev) echo "role_arn=${{ secrets.AWS_ROLE_ARN_DEV }}" >> $GITHUB_OUTPUT ;;
            test) echo "role_arn=${{ secrets.AWS_ROLE_ARN_TEST }}" >> $GITHUB_OUTPUT ;;
            prod) echo "role_arn=${{ secrets.AWS_ROLE_ARN_PROD }}" >> $GITHUB_OUTPUT ;;
          esac

      - name: Configure AWS OIDC Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ steps.role.outputs.role_arn }}
          aws-region: us-east-1

      - name: Retrieve DB Credentials from SSM
        id: ssm
        run: |
          ENV="${{ github.event.inputs.environment }}"
          DB_HOST=$(aws ssm get-parameter --name "/${ENV}/db/DB_HOST" --with-decryption --query 'Parameter.Value' --output text)
          DB_USER=$(aws ssm get-parameter --name "/${ENV}/db/DB_USER" --with-decryption --query 'Parameter.Value' --output text)
          DB_PASS=$(aws ssm get-parameter --name "/${ENV}/db/DB_PASS" --with-decryption --query 'Parameter.Value' --output text)
          DB_NAME="${{ github.event.inputs.target_db }}"

          echo "db_host=$DB_HOST" >> $GITHUB_OUTPUT
          echo "db_user=$DB_USER" >> $GITHUB_OUTPUT
          echo "db_pass=$DB_PASS" >> $GITHUB_OUTPUT
          echo "db_name=$DB_NAME" >> $GITHUB_OUTPUT

      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name my-lb-initcluster

      - name: Set Liquibase Command
        id: cmd
        run: |
          if [[ "${{ github.event.inputs.operation }}" == "rollbackCount" ]]; then
            echo "command=rollbackCount ${{ github.event.inputs.rollbackCount }}" >> $GITHUB_OUTPUT
          else
            echo "command=update" >> $GITHUB_OUTPUT
          fi

      - name: Generate Liquibase Job Manifest
        run: |
          cp manifests/liquibase-job-template.yaml manifests/liquibase-job.yaml
          sed -i "s|__DB_HOST__|${{ steps.ssm.outputs.db_host }}|g" manifests/liquibase-job.yaml
          sed -i "s|__DB_NAME__|${{ steps.ssm.outputs.db_name }}|g" manifests/liquibase-job.yaml
          sed -i "s|__DB_USER__|${{ steps.ssm.outputs.db_user }}|g" manifests/liquibase-job.yaml
          sed -i "s|__DB_PASS__|${{ steps.ssm.outputs.db_pass }}|g" manifests/liquibase-job.yaml
          sed -i "s|__LIQUIBASE_COMMAND__|${{ steps.cmd.outputs.command }}|g" manifests/liquibase-job.yaml
          sed -i "s|__TARGET_DB__|${{ steps.ssm.outputs.db_name }}|g" manifests/liquibase-job.yaml

      - name: Deploy Liquibase Job to EKS
        run: |
          kubectl apply -f manifests/liquibase-job.yaml -n liquibase-demo
          kubectl wait --for=condition=complete job/liquibase-job -n liquibase-demo --timeout=300s
          POD=$(kubectl get pods -n liquibase-demo -l job-name=liquibase-job -o jsonpath="{.items[0].metadata.name}")
          echo "Liquibase Job Logs:"
          kubectl logs $POD -n liquibase-demo

      - name: Cleanup Liquibase Job
        run: kubectl delete job liquibase-job -n liquibase-demo || true
