name: Liquibase Migration Pipeline

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Liquibase operation: update or rollback'
        required: true
        default: update
      rollbackCount:
        description: 'Number of changesets to rollback (e.g., 4 for full rollback)'
        required: false

jobs:
  liquibase:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repository
      - name: Checkout Repo
        uses: actions/checkout@v2

      # 2. Lint SQL files using SQLFluff
      - name: Lint SQL with SQLFluff
        run: |
          pip install sqlfluff==3.2.0
          sqlfluff lint liquibase/ --dialect postgres

      # 3. Configure AWS Credentials (ensure these are set as GitHub Secrets)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 4. Update kubeconfig for EKS
      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name my-lb-initcluster

      # 5. Deploy DB Credentials & Postgres manifests
      - name: Deploy DB Credentials & Postgres
        run: |
          kubectl apply -f manifests/db-credentials-secret.yaml -n liquibase-demo
          kubectl apply -f manifests/postgres-deployment.yaml -n liquibase-demo
          kubectl apply -f manifests/postgres-service.yaml -n liquibase-demo

      # 6. Determine the Liquibase Command based on input
      - name: Set Liquibase Command
        id: set_command
        run: |
          if [ "${{ github.event.inputs.operation }}" = "update" ]; then
            echo "command=update" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.operation }}" = "rollback" ]; then
            if [ -z "${{ github.event.inputs.rollbackCount }}" ]; then
              echo "command=rollback v1.0" >> $GITHUB_OUTPUT
            else
              # Ensure there's a space between 'rollbackCount' and the number.
              echo "command=rollbackCount ${{ github.event.inputs.rollbackCount }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "command=update" >> $GITHUB_OUTPUT
          fi

      # 7. Generate the Liquibase Job manifest by substituting the placeholder
      - name: Generate Liquibase Job Manifest
        run: |
          sed "s|__LIQUIBASE_COMMAND__|${{ steps.set_command.outputs.command }}|g" manifests/liquibase-job-template.yaml > manifests/liquibase-job.yaml
          echo "Generated Manifest:"
          cat manifests/liquibase-job.yaml

      # 8. Deploy the Liquibase Job and wait for completion
      - name: Deploy Liquibase Job
        run: |
          kubectl apply -f manifests/liquibase-job.yaml -n liquibase-demo
          kubectl wait --for=condition=complete job/liquibase-job -n liquibase-demo --timeout=300s
          POD=$(kubectl get pods -n liquibase-demo -l job-name=liquibase-job -o jsonpath="{.items[0].metadata.name}")
          echo "Liquibase Job Logs:"
          kubectl logs $POD -n liquibase-demo

      # 9. Cleanup: Delete the Liquibase Job from the namespace
      - name: Cleanup Liquibase Job
        run: kubectl delete job liquibase-job -n liquibase-demo
