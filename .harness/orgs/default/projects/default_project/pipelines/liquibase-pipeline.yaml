pipeline:
  name: Liquibase Deployment Pipeline
  identifier: LiquibaseDeploymentPipeline
  orgIdentifier: default
  projectIdentifier: default_project
  repo:
    connectorRef: github_connector
    repositoryName: AdityaOnCloud14/eks-liquibase-demo
    branch: main
    repoRoot: "."
  variables:
    - name: OperationType
      type: String
      description: Liquibase operation (“update” or “rollback”)
      default: update
      allowedValues:
        - update
        - rollback
    - name: RollbackCount
      type: Number
      description: How many changesets to roll back
      default: 1
    - name: GitBranch
      type: String
      description: Branch to pull the template from
      default: main
  stages:
    - stage:
        name: DevDatabaseMigration
        identifier: Dev
        type: Deployment
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: Abort
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: liquibase_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: LiquibaseJobTemplate
                        type: KubernetesManifest
                        spec:
                          store:
                            type: Git
                            spec:
                              connectorRef: github_connector
                              gitFetchType: Branch
                              branch: <+pipeline.variables.GitBranch>
                              paths:
                                - manifests/liquibase-job-template.yaml
                          skipResourceVersioning: true
          environment:
            environmentRef: dev
            deployToAll: false
            infrastructure:
              identifier: eks_infra_dev
              type: KubernetesDirect
              spec:
                connectorRef: eks_connector
                namespace: liquibase-demo
                releaseName: liquibase-job
          execution:
            steps:
              - step:
                  name: GenerateManifestDev
                  identifier: GenerateManifestDev
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: <+secrets.getValue('DB_HOST')>
                      - name: DB_USER
                        type: Secret
                        value: <+secrets.getValue('DB_USER')>
                      - name: DB_PASS
                        type: Secret
                        value: <+secrets.getValue('DB_PASS')>
                      - name: TARGET_DB
                        type: Secret
                        value: <+secrets.getValue('DB_NAME')>
                      - name: GIT_BRANCH
                        type: String
                        value: <+pipeline.variables.GitBranch>
                    source:
                      type: Inline
                      spec:
                        script: |
                          cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                          sed -i "s|__DB_HOST__|$DB_HOST|g"           ci_manifest.yaml
                          sed -i "s|__DB_USER__|$DB_USER|g"           ci_manifest.yaml
                          sed -i "s|__DB_PASSWORD__|$DB_PASS|g"        ci_manifest.yaml
                          sed -i "s|__TARGET_DB__|$TARGET_DB|g"        ci_manifest.yaml
                          sed -i "s|__GIT_BRANCH__|$GIT_BRANCH|g"      ci_manifest.yaml
                          if [ "<+pipeline.variables.OperationType>" = "rollback" ]; then
                            sed -i "s|__LIQUIBASE_COMMAND__|rollbackCount <+pipeline.variables.RollbackCount>|g" ci_manifest.yaml
                          else
                            sed -i "s|__LIQUIBASE_COMMAND__|update|g" ci_manifest.yaml
                          fi
                          NAME=$(yq e '.metadata.name' ci_manifest.yaml)
                          echo "export LIQUIBASE_JOB_NAME=$NAME" >> harness_env_export.sh
              - step:
                  name: ApplyJobDev
                  identifier: ApplyJobDev
                  type: K8sApply
                  spec:
                    filePaths:
                      - ci_manifest.yaml
                    skipDryRun: false
                    skipSteadyStateCheck: false
              - step:
                  name: CleanupJobDev
                  identifier: CleanupJobDev
                  type: K8sDelete
                  when:
                    stageStatus: All
                  spec:
                    deleteResources:
                      names:
                        - Job/<+step.GenerateManifestDev.output.LIQUIBASE_JOB_NAME>
                    skipDryRun: false
                    skipSteadyStateCheck: false
                    timeout: 10m
    - stage:
        name: TestDatabaseMigration
        identifier: Test
        type: Deployment
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: Abort
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: liquibase_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: LiquibaseJobTemplate
                        type: KubernetesManifest
                        spec:
                          store:
                            type: Git
                            spec:
                              connectorRef: github_connector
                              gitFetchType: Branch
                              branch: <+pipeline.variables.GitBranch>
                              paths:
                                - manifests/liquibase-job-template.yaml
                          skipResourceVersioning: true
          environment:
            environmentRef: test
            deployToAll: false
            infrastructure:
              identifier: eks_infra_test
              type: KubernetesDirect
              spec:
                connectorRef: eks_connector
                namespace: liquibase-demo
                releaseName: liquibase-job
          execution:
            steps:
              - step:
                  name: GenerateManifestTest
                  identifier: GenerateManifestTest
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: <+secrets.getValue('TEST_DB_HOST')>
                      - name: DB_USER
                        type: Secret
                        value: <+secrets.getValue('TEST_DB_USER')>
                      - name: DB_PASS
                        type: Secret
                        value: <+secrets.getValue('TEST_DB_PASS')>
                      - name: TARGET_DB
                        type: Secret
                        value: <+secrets.getValue('TEST_DB_NAME')>
                      - name: GIT_BRANCH
                        type: String
                        value: <+pipeline.variables.GitBranch>
                    source:
                      type: Inline
                      spec:
                        script: |
                          cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                          sed -i "s|__DB_HOST__|$DB_HOST|g"           ci_manifest.yaml
                          sed -i "s|__DB_USER__|$DB_USER|g"           ci_manifest.yaml
                          sed -i "s|__DB_PASSWORD__|$DB_PASS|g"        ci_manifest.yaml
                          sed -i "s|__TARGET_DB__|$TARGET_DB|g"        ci_manifest.yaml
                          sed -i "s|__GIT_BRANCH__|$GIT_BRANCH|g"      ci_manifest.yaml
                          if [ "<+pipeline.variables.OperationType>" = "rollback" ]; then
                            sed -i "s|__LIQUIBASE_COMMAND__|rollbackCount <+pipeline.variables.RollbackCount>|g" ci_manifest.yaml
                          else
                            sed -i "s|__LIQUIBASE_COMMAND__|update|g" ci_manifest.yaml
                          fi
                          NAME=$(yq e '.metadata.name' ci_manifest.yaml)
                          echo "export LIQUIBASE_JOB_NAME=$NAME" >> harness_env_export.sh
              - step:
                  name: ApplyJobTest
                  identifier: ApplyJobTest
                  type: K8sApply
                  spec:
                    filePaths:
                      - ci_manifest.yaml
                    skipDryRun: false
                    skipSteadyStateCheck: false
              - step:
                  name: CleanupJobTest
                  identifier: CleanupJobTest
                  type: K8sDelete
                  when:
                    stageStatus: All
                  spec:
                    deleteResources:
                      names:
                        - Job/<+step.GenerateManifestTest.output.LIQUIBASE_JOB_NAME>
                    skipDryRun: false
                    skipSteadyStateCheck: false
                    timeout: 10m
    - stage:
        name: ProdDatabaseMigration
        identifier: Prod
        type: Deployment
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: Abort
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: liquibase_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: LiquibaseJobTemplate
                        type: KubernetesManifest
                        spec:
                          store:
                            type: Git
                            spec:
                              connectorRef: github_connector
                              gitFetchType: Branch
                              branch: <+pipeline.variables.GitBranch>
                              paths:
                                - manifests/liquibase-job-template.yaml
                          skipResourceVersioning: true
          environment:
            environmentRef: prod
            deployToAll: false
            infrastructure:
              identifier: eks_infra_prod
              type: KubernetesDirect
              spec:
                connectorRef: eks_connector
                namespace: liquibase-demo
                releaseName: liquibase-job
          execution:
            steps:
              - step:
                  name: GenerateManifestProd
                  identifier: GenerateManifestProd
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: <+secrets.getValue('PROD_DB_HOST')>
                      - name: DB_USER
                        type: Secret
                        value: <+secrets.getValue('PROD_DB_USER')>
                      - name: DB_PASS
                        type: Secret
                        value: <+secrets.getValue('PROD_DB_PASS')>
                      - name: TARGET_DB
                        type: Secret
                        value: <+secrets.getValue('PROD_DB_NAME')>
                      - name: GIT_BRANCH
                        type: String
                        value: <+pipeline.variables.GitBranch>
                    source:
                      type: Inline
                      spec:
                        script: |
                          cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                          sed -i "s|__DB_HOST__|$DB_HOST|g"           ci_manifest.yaml
                          sed -i "s|__DB_USER__|$DB_USER|g"           ci_manifest.yaml
                          sed -i "s|__DB_PASSWORD__|$DB_PASS|g"        ci_manifest.yaml
                          sed -i "s|__TARGET_DB__|$TARGET_DB|g"        ci_manifest.yaml
                          sed -i "s|__GIT_BRANCH__|$GIT_BRANCH|g"      ci_manifest.yaml
                          if [ "<+pipeline.variables.OperationType>" = "rollback" ]; then
                            sed -i "s|__LIQUIBASE_COMMAND__|rollbackCount <+pipeline.variables.RollbackCount>|g" ci_manifest.yaml
                          else
                            sed -i "s|__LIQUIBASE_COMMAND__|update|g" ci_manifest.yaml
                          fi
                          NAME=$(yq e '.metadata.name' ci_manifest.yaml)
                          echo "export LIQUIBASE_JOB_NAME=$NAME" >> harness_env_export.sh
              - step:
                  name: ApplyJobProd
                  identifier: ApplyJobProd
                  type: K8sApply
                  spec:
                    filePaths:
                      - ci_manifest.yaml
                    skipDryRun: false
                    skipSteadyStateCheck: false
              - step:
                  name: CleanupJobProd
                  identifier: CleanupJobProd
                  type: K8sDelete
                  when:
                    stageStatus: All
                  spec:
                    deleteResources:
                      names:
                        - Job/<+step.GenerateManifestProd.output.LIQUIBASE_JOB_NAME>
                    skipDryRun: false
                    skipSteadyStateCheck: false
                    timeout: 10m
