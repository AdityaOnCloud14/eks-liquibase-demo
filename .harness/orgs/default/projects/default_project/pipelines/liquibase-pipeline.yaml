pipeline:
  name: Liquibase Dev Deployment (Static Manifest)
  identifier: LiquibaseDevStatic
  orgIdentifier: default
  projectIdentifier: default_project
  variables:
    - name: OperationType
      type: String
      default: update
      value: <+input>
      allowedValues:
        - update
        - rollbackCount
    - name: RollbackCount
      type: String
      default: "1"
      value: <+input>
    - name: GitBranch
      type: String
      default: main
      value: <+input>
    - name: TargetDB
      type: String
      default: demo_db
      value: <+input>
  stages:
    - stage:
        name: LiquibaseDevMigrationStatic
        identifier: LiquibaseDevStatic
        type: Deployment
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: Abort
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: liquibase_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: liquibase_job_manifest
                        type: K8sManifest
                        spec:
                          store:
                            type: Github
                            spec:
                              connectorRef: github_connector
                              gitFetchType: Branch
                              paths:
                                - manifests/liquibase-job-template.yaml
                              repoName: AdityaOnCloud14/eks-liquibase-demo
                              branch: <+pipeline.variables.GitBranch>
                          skipResourceVersioning: false
                          enableDeclarativeRollback: false
          environment:
            environmentRef: dev
            deployToAll: false
            infrastructureDefinition:
              identifier: eks_infra_dev
          execution:
            steps:
              - step:
                  name: ApplyLiquibaseJob
                  identifier: ApplyLiquibaseJob
                  type: K8sApply
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    skipSteadyStateCheck: false
                    filePaths:
                      - manifests/liquibase-job-template.yaml
                    overrides:
                      - name: JOB_ENV_VARS
                        type: Environment
                        spec:
                          variables:
                            - name: DB_HOST
                              type: Secret
                              value: <+secrets.getValue('DB_HOST')>
                            - name: DB_USER
                              type: Secret
                              value: <+secrets.getValue('DB_USER')>
                            - name: DB_PASS
                              type: Secret
                              value: <+secrets.getValue('DB_PASS')>
                            - name: DB_NAME
                              type: String
                              value: <+pipeline.variables.TargetDB>
                            - name: LIQUIBASE_COMMAND
                              type: String
                              value: <+pipeline.variables.OperationType == "rollbackCount" ? "rollbackCount " + pipeline.variables.RollbackCount : "update">
              - step:
                  name: WaitForCompletion
                  identifier: WaitForCompletion
                  type: ShellScript
                  timeout: 5m
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          echo "Waiting for job to complete..."
                          kubectl wait --for=condition=complete job/liquibase-job -n liquibase-demo --timeout=300s
                          POD=$(kubectl get pods -n liquibase-demo -l job-name=liquibase-job -o jsonpath="{.items[0].metadata.name}")
                          echo "Logs for Liquibase Job:"
                          kubectl logs $POD -n liquibase-demo
              - step:
                  name: CleanupLiquibaseJob
                  identifier: CleanupLiquibaseJob
                  type: K8sDelete
                  timeout: 10m
                  when:
                    stageStatus: All
                  spec:
                    deleteResources:
                      names:
                        - Job/liquibase-job
                    skipDryRun: false
                    skipSteadyStateCheck: false
