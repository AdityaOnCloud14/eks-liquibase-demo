pipeline:
  name: Liquibase Multi-Environment Pipeline
  identifier: Liquibase_MultiEnvironment_Pipeline
  projectIdentifier: YOUR_PROJECT_IDENTIFIER    # ← your project ID
  orgIdentifier: YOUR_ORG_IDENTIFIER            # ← your org ID
  variables:
    - name: operation
      type: String
      description: "Liquibase operation to perform"
      default: "update"
      allowedValues: [ update, rollbackCount ]
    - name: rollbackCount
      type: Number
      description: "Number of changesets to rollback"
      default: 1

  stages:

    # ────────── DEV ──────────
    - stage:
        name: Dev
        identifier: Dev
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: LiquibaseService                   # ← your Harness Service
          environment:
            environmentRef: dev                            # ← your Dev environment
            deployToAll: false
            infrastructureDefinitions:
              - identifier: dev-infra                      # ← your Dev infra def’n
          execution:
            steps:

              # 1) Generate manifest
              - step:
                  name: Generate Manifest (Dev)
                  identifier: gen_manifest_dev
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: <+secrets.getValue("DEV_DB_HOST")>
                      - name: DB_USER
                        type: Secret
                        value: <+secrets.getValue("DEV_DB_USER")>
                      - name: DB_PASS
                        type: Secret
                        value: <+secrets.getValue("DEV_DB_PASS")>
                      - name: TARGET_DB
                        type: String
                        value: "demo_db"                        # ← or <+pipeline.variables.target_db>
                    source:
                      type: Inline
                      spec:
                        script: |
                          cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                          sed -i "s|__DB_HOST__|$DB_HOST|g"          ci_manifest.yaml
                          sed -i "s|__DB_USER__|$DB_USER|g"          ci_manifest.yaml
                          sed -i "s|__DB_PASS__|$DB_PASS|g"          ci_manifest.yaml
                          sed -i "s|__TARGET_DB__|$TARGET_DB|g"      ci_manifest.yaml
                          if [ "<+pipeline.variables.operation>" = "rollbackCount" ]; then
                            cmd="rollbackCount <+pipeline.variables.rollbackCount>"
                          else
                            cmd="update"
                          fi
                          sed -i "s|__LIQUIBASE_COMMAND__|$cmd|g"    ci_manifest.yaml

              # 2) Deploy & wait
              - step:
                  name: Deploy Job (Dev)
                  identifier: deploy_job_dev
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          aws eks update-kubeconfig \
                            --region us-east-1 \
                            --name my-lb-initcluster
                          kubectl apply -f ci_manifest.yaml -n liquibase-demo
                          kubectl wait --for=condition=complete job/liquibase-job \
                            -n liquibase-demo --timeout=300s

              # 3) Stream logs
              - step:
                  name: Get Logs (Dev)
                  identifier: logs_dev
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          POD=$(kubectl get pods -n liquibase-demo \
                            -l job-name=liquibase-job \
                            -o jsonpath="{.items[0].metadata.name}")
                          kubectl logs $POD -n liquibase-demo

              # 4) Cleanup (always)
              - step:
                  name: Cleanup Job (Dev)
                  identifier: cleanup_dev
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          kubectl delete job liquibase-job -n liquibase-demo || true

          failureStrategies:
            - onFailure:
                errors: [ AllErrors ]
                action:
                  type: Abort

    # ────────── TEST (manual approval) ──────────
    - stage:
        name: Test
        identifier: Test
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: LiquibaseService
          environment:
            environmentRef: test
            deployToAll: false
            infrastructureDefinitions:
              - identifier: test-infra
          execution:
            steps:

              - step:
                  name: Approve for Test
                  identifier: approve_test
                  type: HarnessApproval
                  spec:
                    approvalMessage: "Approve deployment to TEST?"
                    approvers:
                      userGroups: ["_account_all_users"]
                    timeout: 2h

              - step:
                  name: Generate Manifest (Test)
                  identifier: gen_manifest_test
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: <+secrets.getValue("TEST_DB_HOST")>
                      - name: DB_USER
                        type: Secret
                        value: <+secrets.getValue("TEST_DB_USER")>
                      - name: DB_PASS
                        type: Secret
                        value: <+secrets.getValue("TEST_DB_PASS")>
                      - name: TARGET_DB
                        type: String
                        value: "demo_db"
                    source:
                      type: Inline
                      spec:
                        script: |
                          cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                          sed -i "s|__DB_HOST__|$DB_HOST|g"          ci_manifest.yaml
                          sed -i "s|__DB_USER__|$DB_USER|g"          ci_manifest.yaml
                          sed -i "s|__DB_PASS__|$DB_PASS|g"          ci_manifest.yaml
                          sed -i "s|__TARGET_DB__|$TARGET_DB|g"      ci_manifest.yaml
                          if [ "<+pipeline.variables.operation>" = "rollbackCount" ]; then
                            cmd="rollbackCount <+pipeline.variables.rollbackCount>"
                          else
                            cmd="update"
                          fi
                          sed -i "s|__LIQUIBASE_COMMAND__|$cmd|g"    ci_manifest.yaml

              - step:
                  name: Deploy Job (Test)
                  identifier: deploy_job_test
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          aws eks update-kubeconfig \
                            --region us-east-1 \
                            --name my-lb-initcluster
                          kubectl apply -f ci_manifest.yaml -n liquibase-demo
                          kubectl wait --for=condition=complete job/liquibase-job \
                            -n liquibase-demo --timeout=300s

              - step:
                  name: Get Logs (Test)
                  identifier: logs_test
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          POD=$(kubectl get pods -n liquibase-demo \
                            -l job-name=liquibase-job \
                            -o jsonpath="{.items[0].metadata.name}")
                          kubectl logs $POD -n liquibase-demo

              - step:
                  name: Cleanup Job (Test)
                  identifier: cleanup_test
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          kubectl delete job liquibase-job -n liquibase-demo || true

          failureStrategies:
            - onFailure:
                errors: [ AllErrors ]
                action:
                  type: Abort

    # ────────── PROD (manual approval) ──────────
    - stage:
        name: Prod
        identifier: Prod
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: LiquibaseService
          environment:
            environmentRef: prod
            deployToAll: false
            infrastructureDefinitions:
              - identifier: prod-infra
          execution:
            steps:

              - step:
                  name: Approve for Prod
                  identifier: approve_prod
                  type: HarnessApproval
                  spec:
                    approvalMessage: "Approve deployment to PROD?"
                    approvers:
                      userGroups: ["_account_all_users"]
                    timeout: 4h

              - step:
                  name: Generate Manifest (Prod)
                  identifier: gen_manifest_prod
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: <+secrets.getValue("PROD_DB_HOST")>
                      - name: DB_USER
                        type: Secret
                        value: <+secrets.getValue("PROD_DB_USER")>
                      - name: DB_PASS
                        type: Secret
                        value: <+secrets.getValue("PROD_DB_PASS")>
                      - name: TARGET_DB
                        type: String
                        value: "demo_db"
                    source:
                      type: Inline
                      spec:
                        script: |
                          cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                          sed -i "s|__DB_HOST__|$DB_HOST|g"          ci_manifest.yaml
                          sed -i "s|__DB_USER__|$DB_USER|g"          ci_manifest.yaml
                          sed -i "s|__DB_PASS__|$DB_PASS|g"          ci_manifest.yaml
                          sed -i "s|__TARGET_DB__|$TARGET_DB|g"      ci_manifest.yaml
                          if [ "<+pipeline.variables.operation>" = "rollbackCount" ]; then
                            cmd="rollbackCount <+pipeline.variables.rollbackCount>"
                          else
                            cmd="update"
                          fi
                          sed -i "s|__LIQUIBASE_COMMAND__|$cmd|g"    ci_manifest.yaml

              - step:
                  name: Deploy Job (Prod)
                  identifier: deploy_job_prod
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          aws eks update-kubeconfig \
                            --region us-east-1 \
                            --name my-lb-initcluster
                          kubectl apply -f ci_manifest.yaml -n liquibase-demo
                          kubectl wait --for=condition=complete job/liquibase-job \
                            -n liquibase-demo --timeout=300s

              - step:
                  name: Get Logs (Prod)
                  identifier: logs_prod
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          POD=$(kubectl get pods -n liquibase-demo \
                            -l job-name=liquibase-job \
                            -o jsonpath="{.items[0].metadata.name}")
                          kubectl logs $POD -n liquibase-demo

              - step:
                  name: Cleanup Job (Prod)
                  identifier: cleanup_prod
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          kubectl delete job liquibase-job -n liquibase-demo || true

          failureStrategies:
            - onFailure:
                errors: [ AllErrors ]
                action:
                  type: Abort
