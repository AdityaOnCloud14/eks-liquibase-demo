pipeline:
  name: Liquibase Deployment Pipeline
  identifier: LiquibaseDeploymentPipeline
  orgIdentifier: default
  projectIdentifier: default_project

  variables:
    - name: OperationType
      type: String
      description: Liquibase operation ("update" or "rollback")
      default: update
      allowedValues:
        - update
        - rollback
    - name: RollbackCount
      type: Number
      description: Number of changesets to roll back (if rollback)
      default: 1
    - name: GitBranch
      type: String
      description: Git branch where the template lives
      default: main

  stages:

    # ────────── DEV ──────────
    - stage:
        name: Dev
        identifier: Dev
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: liquibase_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: JobTemplate
                        type: KubernetesManifest
                        spec:
                          store:
                            type: Git
                            spec:
                              connectorRef: github_conenctor
                              gitFetchType: Branch
                              branch: "<+pipeline.variables.GitBranch>"
                              paths:
                                - "manifests/liquibase-job-template.yaml"
                          skipResourceVersioning: true
          environment:
            environmentRef: dev
            deployToAll: false
            infrastructureDefinitions:
              - identifier: eks_connector
          execution:
            steps:

              # 1. Generate the rendered Job manifest
              - step:
                  name: generate_manifest_dev
                  identifier: generate_manifest_dev
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: "<+secrets.getValue(\"DB_HOST\")>"
                      - name: DB_USER
                        type: Secret
                        value: "<+secrets.getValue(\"DB_USER\")>"
                      - name: DB_PASS
                        type: Secret
                        value: "<+secrets.getValue(\"DB_PASS\")>"
                      - name: TARGET_DB
                        type: Secret
                        value: "<+secrets.getValue(\"DB_NAME\")>"
                      - name: GIT_BRANCH
                        type: String
                        value: "<+pipeline.variables.GitBranch>"
                    outputVariables:
                      - name: JOB_NAME
                    command: |
                      cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                      sed -i "s|__DB_HOST__|$DB_HOST|g"          ci_manifest.yaml
                      sed -i "s|__DB_USER__|$DB_USER|g"          ci_manifest.yaml
                      sed -i "s|__DB_PASSWORD__|$DB_PASS|g"       ci_manifest.yaml
                      sed -i "s|__TARGET_DB__|$TARGET_DB|g"       ci_manifest.yaml
                      sed -i "s|__GIT_BRANCH__|$GIT_BRANCH|g"     ci_manifest.yaml
                      if [ "<+pipeline.variables.OperationType>" = "rollback" ]; then
                        sed -i "s|__LIQUIBASE_COMMAND__|rollbackCount <+pipeline.variables.RollbackCount>|g" ci_manifest.yaml
                      else
                        sed -i "s|__LIQUIBASE_COMMAND__|update|g"   ci_manifest.yaml
                      fi
                      JOB_NAME=$(yq e '.metadata.name' ci_manifest.yaml)
                      echo "JOB_NAME=$JOB_NAME" > job_name.out

              # 2. Apply the Job and wait
              - step:
                  name: apply_job_dev
                  identifier: apply_job_dev
                  type: K8sApply
                  spec:
                    filePaths:
                      - "ci_manifest.yaml"
                    skipDryRun: false
                    skipSteadyStateCheck: false

              # 3. Always clean up the Job (success or failure)
              - step:
                  name: delete_job_dev
                  identifier: delete_job_dev
                  type: K8sDelete
                  when:
                    stageStatus: All
                  spec:
                    deleteResources:
                      type: DeleteResourceName
                      spec:
                        resources:
                          - "Job/<+loadFile(\"job_name.out\").JOB_NAME>"

          failureStrategies:
            - onFailure:
                errors:
                  - AllErrors
                action:
                  type: Abort


    # ────────── TEST ──────────
    - stage:
        name: Test
        identifier: Test
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: liquibase_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: JobTemplate
                        type: KubernetesManifest
                        spec:
                          store:
                            type: Git
                            spec:
                              connectorRef: github_conenctor
                              gitFetchType: Branch
                              branch: "<+pipeline.variables.GitBranch>"
                              paths:
                                - "manifests/liquibase-job-template.yaml"
                          skipResourceVersioning: true
          environment:
            environmentRef: test
            deployToAll: false
            infrastructureDefinitions:
              - identifier: eks_connector
          execution:
            steps:

              - step:
                  name: generate_manifest_test
                  identifier: generate_manifest_test
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: "<+secrets.getValue(\"TEST_DB_HOST\")>"
                      - name: DB_USER
                        type: Secret
                        value: "<+secrets.getValue(\"TEST_DB_USER\")>"
                      - name: DB_PASS
                        type: Secret
                        value: "<+secrets.getValue(\"TEST_DB_PASS\")>"
                      - name: TARGET_DB
                        type: Secret
                        value: "<+secrets.getValue(\"TEST_DB_NAME\")>"
                      - name: GIT_BRANCH
                        type: String
                        value: "<+pipeline.variables.GitBranch>"
                    outputVariables:
                      - name: JOB_NAME
                    command: |
                      cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                      sed -i "s|__DB_HOST__|$DB_HOST|g"          ci_manifest.yaml
                      sed -i "s|__DB_USER__|$DB_USER|g"          ci_manifest.yaml
                      sed -i "s|__DB_PASSWORD__|$DB_PASS|g"       ci_manifest.yaml
                      sed -i "s|__TARGET_DB__|$TARGET_DB|g"       ci_manifest.yaml
                      sed -i "s|__GIT_BRANCH__|$GIT_BRANCH|g"     ci_manifest.yaml
                      if [ "<+pipeline.variables.OperationType>" = "rollback" ]; then
                        sed -i "s|__LIQUIBASE_COMMAND__|rollbackCount <+pipeline.variables.RollbackCount>|g" ci_manifest.yaml
                      else
                        sed -i "s|__LIQUIBASE_COMMAND__|update|g"   ci_manifest.yaml
                      fi
                      JOB_NAME=$(yq e '.metadata.name' ci_manifest.yaml)
                      echo "JOB_NAME=$JOB_NAME" > job_name_test.out

              - step:
                  name: apply_job_test
                  identifier: apply_job_test
                  type: K8sApply
                  spec:
                    filePaths:
                      - "ci_manifest.yaml"

              - step:
                  name: delete_job_test
                  identifier: delete_job_test
                  type: K8sDelete
                  when:
                    stageStatus: All
                  spec:
                    deleteResources:
                      type: DeleteResourceName
                      spec:
                        resources:
                          - "Job/<+loadFile(\"job_name_test.out\").JOB_NAME>"

          failureStrategies:
            - onFailure:
                errors:
                  - AllErrors
                action:
                  type: Abort


    # ────────── PROD ──────────
    - stage:
        name: Prod
        identifier: Prod
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: liquibase_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: JobTemplate
                        type: KubernetesManifest
                        spec:
                          store:
                            type: Git
                            spec:
                              connectorRef: github_conenctor
                              gitFetchType: Branch
                              branch: "<+pipeline.variables.GitBranch>"
                              paths:
                                - "manifests/liquibase-job-template.yaml"
                          skipResourceVersioning: true
          environment:
            environmentRef: prod
            deployToAll: false
            infrastructureDefinitions:
              - identifier: eks_connector
          execution:
            steps:

              - step:
                  name: generate_manifest_prod
                  identifier: generate_manifest_prod
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: "<+secrets.getValue(\"PROD_DB_HOST\")>"
                      - name: DB_USER
                        type: Secret
                        value: "<+secrets.getValue(\"PROD_DB_USER\")>"
                      - name: DB_PASS
                        type: Secret
                        value: "<+secrets.getValue(\"PROD_DB_PASS\")>"
                      - name: TARGET_DB
                        type: Secret
                        value: "<+secrets.getValue(\"PROD_DB_NAME\")>"
                      - name: GIT_BRANCH
                        type: String
                        value: "<+pipeline.variables.GitBranch>"
                    outputVariables:
                      - name: JOB_NAME
                    command: |
                      cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                      sed -i "s|__DB_HOST__|$DB_HOST|g"          ci_manifest.yaml
                      sed -i "s|__DB_USER__|$DB_USER|g"          ci_manifest.yaml
                      sed -i "s|__DB_PASSWORD__|$DB_PASS|g"       ci_manifest.yaml
                      sed -i "s|__TARGET_DB__|$TARGET_DB|g"       ci_manifest.yaml
                      sed -i "s|__GIT_BRANCH__|$GIT_BRANCH|g"     ci_manifest.yaml
                      if [ "<+pipeline.variables.OperationType>" = "rollback" ]; then
                        sed -i "s|__LIQUIBASE_COMMAND__|rollbackCount <+pipeline.variables.RollbackCount>|g" ci_manifest.yaml
                      else
                        sed -i "s|__LIQUIBASE_COMMAND__|update|g"   ci_manifest.yaml
                      fi
                      JOB_NAME=$(yq e '.metadata.name' ci_manifest.yaml)
                      echo "JOB_NAME=$JOB_NAME" > job_name_prod.out

              - step:
                  name: apply_job_prod
                  identifier: apply_job_prod
                  type: K8sApply
                  spec:
                    filePaths:
                      - "ci_manifest.yaml"

              - step:
                  name: delete_job_prod
                  identifier: delete_job_prod
                  type: K8sDelete
                  when:
                    stageStatus: All
                  spec:
                    deleteResources:
                      type: DeleteResourceName
                      spec:
                        resources:
                          - "Job/<+loadFile(\"job_name_prod.out\").JOB_NAME>"

          failureStrategies:
            - onFailure:
                errors:
                  - AllErrors
                action:
                  type: Abort
