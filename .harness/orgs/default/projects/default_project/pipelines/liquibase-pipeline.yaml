pipeline:
  name: Liquibase Deployment Pipeline
  identifier: LiquibaseDeploymentPipeline
  projectIdentifier: default_project        # Adjust as needed
  orgIdentifier: default
  variables:
    - name: OperationType                  # "update" or "rollback"
      type: String
      default: "update"
      allowedValues: 
        - "update"
        - "rollback"
    - name: RollbackCount                  # Number of changesets to roll back (if rollback)
      type: Number
      default: 1
    - name: GitBranch                      # Git branch name (used in Job naming)
      type: String
      default: "main"
  stages:
    - stage:
        name: Dev
        identifier: Dev
        description: "Liquibase deployment to Dev database"
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: liquibase_service            # Reference a pre-created Service containing the manifest template
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: LiquibaseJobManifest
                        type: KubernetesManifest
                        spec:
                          store:
                            type: Harness
                            spec:
                              files:
                                - /path/in/harness/filestore/liquibase-job-template.yaml
                          # The manifest file includes placeholders (e.g., __DB_HOST__) to be replaced
                          # Mark the manifest to be ignored in main deploy (so we can apply it manually)
                          valuesPaths: []             # No separate values files
                          skipResourceVersioning: true
          environment:
            environmentRef: DevEnv                   # Reference to a Harness Environment for Dev
            deployToAll: false
            infrastructureDefinitions:
              - identifier: eks_connector            # EKS cluster infrastructure (with namespace configured)
          execution:
            steps:
              - step:
                  name: Generate Manifest (Dev)
                  identifier: GenerateManifestDev
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: <+secrets.getValue("DB_HOST")>
                      - name: DB_USER
                        type: Secret
                        value: <+secrets.getValue("DB_USER")>
                      - name: DB_PASSWORD
                        type: Secret
                        value: <+secrets.getValue("DB_PASS")>
                      - name: TARGET_DB
                        type: Secret
                        value: <+secrets.getValue("DB_NAME")>
                      - name: GIT_BRANCH
                        value: <+pipeline.variables.GitBranch>
                    outputVariables:
                      - name: LIQUIBASE_JOB_NAME     # Capture the generated Job name for later deletion
                    command: |
                      # Copy the template and replace placeholders with actual values for Dev
                      cp ./liquibase-job-template.yaml ./ci_manifest.yaml
                      sed -i 's/__DB_HOST__/'"$DB_HOST"'/g' ci_manifest.yaml
                      sed -i 's/__DB_USER__/'"$DB_USER"'/g' ci_manifest.yaml
                      sed -i 's/__DB_PASSWORD__/'"$DB_PASSWORD"'/g' ci_manifest.yaml
                      sed -i 's/__TARGET_DB__/'"$TARGET_DB"'/g' ci_manifest.yaml
                      sed -i 's/__GIT_BRANCH__/'"$GIT_BRANCH"'/g' ci_manifest.yaml
                      # Determine Liquibase command (update or rollbackCount N)
                      if [ "<+pipeline.variables.OperationType>" = "rollback" ]; then
                        sed -i 's/__LIQUIBASE_COMMAND__/rollbackCount <+pipeline.variables.RollbackCount>/g' ci_manifest.yaml
                      else
                        sed -i 's/__LIQUIBASE_COMMAND__/update/g' ci_manifest.yaml
                      fi
                      # Export the job name for use in deletion step
                      export LIQUIBASE_JOB_NAME=$(grep -m1 'name:' ci_manifest.yaml | awk '{print $2}')
                  # The working directory will contain liquibase-job-template.yaml from service definition
                  # After this step, ci_manifest.yaml is the rendered Job manifest for Dev
              - step:
                  name: Apply Liquibase Job (Dev)
                  identifier: ApplyJobDev
                  type: K8sApply
                  spec:
                    filePaths: 
                      - ci_manifest.yaml             # Apply the rendered manifest to create the Job
                    skipDryRun: false
                    skipSteadyStateCheck: false      # Let Harness wait for Job completion
              - step:
                  name: Cleanup Liquibase Job (Dev)
                  identifier: DeleteJobDev
                  type: K8sDelete
                  spec:
                    deleteResources:
                      type: DeleteResourceName
                      spec:
                        resources:
                          - Job/<+step.GenerateManifestDev.output.LIQUIBASE_JOB_NAME>
                        # Deletes the Job by name in the target namespace (namespace from infra definition)
            rollbackSteps:
              - step:
                  name: Cleanup Liquibase Job (Dev) - Rollback
                  identifier: DeleteJobDevRollback
                  type: K8sDelete
                  spec:
                    deleteResources:
                      type: DeleteResourceName
                      spec:
                        resources:
                          - Job/<+step.GenerateManifestDev.output.LIQUIBASE_JOB_NAME>
                        # Ensures the Job is deleted even if the stage fails
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback         # On any failure, run rollbackSteps (deletes Job) and abort stage
    - stage:
        name: Test
        identifier: Test
        description: "Liquibase deployment to Test database"
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: liquibase_service            # Reuse same service/manifest
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: LiquibaseJobManifest
                        type: KubernetesManifest
                        spec:
                          store:
                            type: Harness
                            spec:
                              files:
                                - /path/in/harness/filestore/liquibase-job-template.yaml
                          valuesPaths: []
                          skipResourceVersioning: true
          environment:
            environmentRef: TestEnv                  # Harness Environment for Test
            deployToAll: false
            infrastructureDefinitions:
              - identifier: eks_connector            # (Could be same cluster, perhaps different namespace)
          execution:
            steps:
              - step:
                  name: Generate Manifest (Test)
                  identifier: GenerateManifestTest
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: <+secrets.getValue("TEST_DB_HOST")>
                      - name: DB_USER
                        type: Secret
                        value: <+secrets.getValue("TEST_DB_USER")>
                      - name: DB_PASSWORD
                        type: Secret
                        value: <+secrets.getValue("TEST_DB_PASS")>
                      - name: TARGET_DB
                        type: Secret
                        value: <+secrets.getValue("TEST_DB_NAME")>
                      - name: GIT_BRANCH
                        value: <+pipeline.variables.GitBranch>
                    outputVariables:
                      - name: LIQUIBASE_JOB_NAME
                    command: |
                      cp ./liquibase-job-template.yaml ./ci_manifest.yaml
                      sed -i 's/__DB_HOST__/'"$DB_HOST"'/g' ci_manifest.yaml
                      sed -i 's/__DB_USER__/'"$DB_USER"'/g' ci_manifest.yaml
                      sed -i 's/__DB_PASSWORD__/'"$DB_PASSWORD"'/g' ci_manifest.yaml
                      sed -i 's/__TARGET_DB__/'"$TARGET_DB"'/g' ci_manifest.yaml
                      sed -i 's/__GIT_BRANCH__/'"$GIT_BRANCH"'/g' ci_manifest.yaml
                      if [ "<+pipeline.variables.OperationType>" = "rollback" ]; then
                        sed -i 's/__LIQUIBASE_COMMAND__/rollbackCount <+pipeline.variables.RollbackCount>/g' ci_manifest.yaml
                      else
                        sed -i 's/__LIQUIBASE_COMMAND__/update/g' ci_manifest.yaml
                      fi
                      export LIQUIBASE_JOB_NAME=$(grep -m1 'name:' ci_manifest.yaml | awk '{print $2}')
              - step:
                  name: Apply Liquibase Job (Test)
                  identifier: ApplyJobTest
                  type: K8sApply
                  spec:
                    filePaths:
                      - ci_manifest.yaml
                    skipDryRun: false
                    skipSteadyStateCheck: false
              - step:
                  name: Cleanup Liquibase Job (Test)
                  identifier: DeleteJobTest
                  type: K8sDelete
                  spec:
                    deleteResources:
                      type: DeleteResourceName
                      spec:
                        resources:
                          - Job/<+step.GenerateManifestTest.output.LIQUIBASE_JOB_NAME>
            rollbackSteps:
              - step:
                  name: Cleanup Liquibase Job (Test) - Rollback
                  identifier: DeleteJobTestRollback
                  type: K8sDelete
                  spec:
                    deleteResources:
                      type: DeleteResourceName
                      spec:
                        resources:
                          - Job/<+step.GenerateManifestTest.output.LIQUIBASE_JOB_NAME>
        failureStrategies:
          - onFailure:
              errors: 
                - AllErrors
              action:
                type: StageRollback
    - stage:
        name: Prod
        identifier: Prod
        description: "Liquibase deployment to Prod database"
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: liquibase_service            # Same service and manifest template
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: LiquibaseJobManifest
                        type: KubernetesManifest
                        spec:
                          store:
                            type: Harness
                            spec:
                              files:
                                - /path/in/harness/filestore/liquibase-job-template.yaml
                          valuesPaths: []
                          skipResourceVersioning: true
          environment:
            environmentRef: ProdEnv                  # Harness Environment for Prod
            deployToAll: false
            infrastructureDefinitions:
              - identifier: eks_connector
          execution:
            steps:
              - step:
                  name: Generate Manifest (Prod)
                  identifier: GenerateManifestProd
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: <+secrets.getValue("PROD_DB_HOST")>
                      - name: DB_USER
                        type: Secret
                        value: <+secrets.getValue("PROD_DB_USER")>
                      - name: DB_PASSWORD
                        type: Secret
                        value: <+secrets.getValue("PROD_DB_PASS")>
                      - name: TARGET_DB
                        type: Secret
                        value: <+secrets.getValue("PROD_DB_NAME")>
                      - name: GIT_BRANCH
                        value: <+pipeline.variables.GitBranch>
                    outputVariables:
                      - name: LIQUIBASE_JOB_NAME
                    command: |
                      cp ./liquibase-job-template.yaml ./ci_manifest.yaml
                      sed -i 's/__DB_HOST__/'"$DB_HOST"'/g' ci_manifest.yaml
                      sed -i 's/__DB_USER__/'"$DB_USER"'/g' ci_manifest.yaml
                      sed -i 's/__DB_PASSWORD__/'"$DB_PASSWORD"'/g' ci_manifest.yaml
                      sed -i 's/__TARGET_DB__/'"$TARGET_DB"'/g' ci_manifest.yaml
                      sed -i 's/__GIT_BRANCH__/'"$GIT_BRANCH"'/g' ci_manifest.yaml
                      if [ "<+pipeline.variables.OperationType>" = "rollback" ]; then
                        sed -i 's/__LIQUIBASE_COMMAND__/rollbackCount <+pipeline.variables.RollbackCount>/g' ci_manifest.yaml
                      else
                        sed -i 's/__LIQUIBASE_COMMAND__/update/g' ci_manifest.yaml
                      fi
                      export LIQUIBASE_JOB_NAME=$(grep -m1 'name:' ci_manifest.yaml | awk '{print $2}')
              - step:
                  name: Apply Liquibase Job (Prod)
                  identifier: ApplyJobProd
                  type: K8sApply
                  spec:
                    filePaths:
                      - ci_manifest.yaml
                    skipDryRun: false
                    skipSteadyStateCheck: false
              - step:
                  name: Cleanup Liquibase Job (Prod)
                  identifier: DeleteJobProd
                  type: K8sDelete
                  spec:
                    deleteResources:
                      type: DeleteResourceName
                      spec:
                        resources:
                          - Job/<+step.GenerateManifestProd.output.LIQUIBASE_JOB_NAME>
            rollbackSteps:
              - step:
                  name: Cleanup Liquibase Job (Prod) - Rollback
                  identifier: DeleteJobProdRollback
                  type: K8sDelete
                  spec:
                    deleteResources:
                      type: DeleteResourceName
                      spec:
                        resources:
                          - Job/<+step.GenerateManifestProd.output.LIQUIBASE_JOB_NAME>
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
