pipeline:
  name: Liquibase Deployment Pipeline
  identifier: LiquibaseDeploymentPipeline
  orgIdentifier: default
  projectIdentifier: default_project
  tags: {}
  variables:
    - name: OperationType
      type: String
      default: update
      allowedValues:
        - update
        - rollback
    - name: RollbackCount
      type: Number
      default: 1
    - name: GitBranch
      type: String
      default: main

  stages:
    - stage:
        name: Dev
        identifier: dev
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: liquibase_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: LiquibaseJobManifest
                        type: KubernetesManifest
                        spec:
                          store:
                            type: Git
                            spec:
                              connectorRef: github_conenctor
                              gitFetchType: Branch
                              branch: <+pipeline.variables.GitBranch>
                              paths:
                                - manifests/liquibase-job-template.yaml
                          skipResourceVersioning: true
          environment:
            environmentRef: dev
            deployToAll: false
            infrastructureDefinitions:
              - identifier: eks_connector
          execution:
            steps:
              - step:
                  name: Generate Manifest Dev
                  identifier: generate_manifest_dev
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: <+secrets.getValue("DB_HOST")>
                      - name: DB_USER
                        type: Secret
                        value: <+secrets.getValue("DB_USER")>
                      - name: DB_PASSWORD
                        type: Secret
                        value: <+secrets.getValue("DB_PASS")>
                      - name: TARGET_DB
                        type: Secret
                        value: <+secrets.getValue("DB_NAME")>
                      - name: GIT_BRANCH
                        value: <+pipeline.variables.GitBranch>
                    outputVariables:
                      - name: LIQUIBASE_JOB_NAME
                    command: |
                      cp liquibase/liquibase-job-template.yaml ci_manifest.yaml
                      sed -i "s|__DB_HOST__|${DB_HOST}|g" ci_manifest.yaml
                      sed -i "s|__DB_USER__|${DB_USER}|g" ci_manifest.yaml
                      sed -i "s|__DB_PASSWORD__|${DB_PASSWORD}|g" ci_manifest.yaml
                      sed -i "s|__TARGET_DB__|${TARGET_DB}|g" ci_manifest.yaml
                      sed -i "s|__GIT_BRANCH__|${GIT_BRANCH}|g" ci_manifest.yaml
                      if [ "<+pipeline.variables.OperationType>" = "rollback" ]; then
                        sed -i "s|__LIQUIBASE_COMMAND__|rollbackCount <+pipeline.variables.RollbackCount>|g" ci_manifest.yaml
                      else
                        sed -i "s|__LIQUIBASE_COMMAND__|update|g" ci_manifest.yaml
                      fi
                      JOB_NAME=$(yq e '.metadata.name' ci_manifest.yaml)
                      echo "LIQUIBASE_JOB_NAME=$JOB_NAME"
                      echo "export LIQUIBASE_JOB_NAME=$JOB_NAME" >> harness_env_export.sh

              - step:
                  name: Apply Liquibase Job Dev
                  identifier: apply_job_dev
                  type: K8sApply
                  spec:
                    filePaths:
                      - ci_manifest.yaml

              - step:
                  name: Cleanup Liquibase Job Dev
                  identifier: delete_job_dev
                  type: K8sDelete
                  spec:
                    deleteResources:
                      type: DeleteResourceName
                      spec:
                        resources:
                          - Job/<+step.generate_manifest_dev.output.LIQUIBASE_JOB_NAME>

          failureStrategies:
            - onFailure:
                errors:
                  - AllErrors
                action:
                  type: StageRollback

    - stage:
        name: Test
        identifier: test
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: liquibase_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: LiquibaseJobManifest
                        type: KubernetesManifest
                        spec:
                          store:
                            type: Git
                            spec:
                              connectorRef: github_conenctor
                              gitFetchType: Branch
                              branch: <+pipeline.variables.GitBranch>
                              paths:
                                - manifests/liquibase-job-template.yaml
                          skipResourceVersioning: true
          environment:
            environmentRef: test
            deployToAll: false
            infrastructureDefinitions:
              - identifier: eks_connector
          execution:
            steps:
              - step:
                  name: Generate Manifest Test
                  identifier: generate_manifest_test
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: <+secrets.getValue("TEST_DB_HOST")>
                      - name: DB_USER
                        type: Secret
                        value: <+secrets.getValue("TEST_DB_USER")>
                      - name: DB_PASSWORD
                        type: Secret
                        value: <+secrets.getValue("TEST_DB_PASS")>
                      - name: TARGET_DB
                        type: Secret
                        value: <+secrets.getValue("TEST_DB_NAME")>
                      - name: GIT_BRANCH
                        value: <+pipeline.variables.GitBranch>
                    outputVariables:
                      - name: LIQUIBASE_JOB_NAME
                    command: |
                      cp liquibase/liquibase-job-template.yaml ci_manifest.yaml
                      sed -i "s|__DB_HOST__|${DB_HOST}|g" ci_manifest.yaml
                      sed -i "s|__DB_USER__|${DB_USER}|g" ci_manifest.yaml
                      sed -i "s|__DB_PASSWORD__|${DB_PASSWORD}|g" ci_manifest.yaml
                      sed -i "s|__TARGET_DB__|${TARGET_DB}|g" ci_manifest.yaml
                      sed -i "s|__GIT_BRANCH__|${GIT_BRANCH}|g" ci_manifest.yaml
                      if [ "<+pipeline.variables.OperationType>" = "rollback" ]; then
                        sed -i "s|__LIQUIBASE_COMMAND__|rollbackCount <+pipeline.variables.RollbackCount>|g" ci_manifest.yaml
                      else
                        sed -i "s|__LIQUIBASE_COMMAND__|update|g" ci_manifest.yaml
                      fi
                      JOB_NAME=$(yq e '.metadata.name' ci_manifest.yaml)
                      echo "LIQUIBASE_JOB_NAME=$JOB_NAME"
                      echo "export LIQUIBASE_JOB_NAME=$JOB_NAME" >> harness_env_export.sh

              - step:
                  name: Apply Liquibase Job Test
                  identifier: apply_job_test
                  type: K8sApply
                  spec:
                    filePaths:
                      - ci_manifest.yaml

              - step:
                  name: Cleanup Liquibase Job Test
                  identifier: delete_job_test
                  type: K8sDelete
                  spec:
                    deleteResources:
                      type: DeleteResourceName
                      spec:
                        resources:
                          - Job/<+step.generate_manifest_test.output.LIQUIBASE_JOB_NAME>
                          
          failureStrategies:
            - onFailure:
                errors:
                  - AllErrors
                action:
                  type: StageRollback

    - stage:
        name: Prod
        identifier: prod
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: liquibase_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: LiquibaseJobManifest
                        type: KubernetesManifest
                        spec:
                          store:
                            type: Git
                            spec:
                              connectorRef: github_conenctor
                              gitFetchType: Branch
                              branch: <+pipeline.variables.GitBranch>
                              paths:
                                - mainfests/liquibase-job-template.yaml
                          skipResourceVersioning: true
          environment:
            environmentRef: prod
            deployToAll: false
            infrastructureDefinitions:
              - identifier: eks_connector
          execution:
            steps:
              - step:
                  name: Generate Manifest Prod
                  identifier: generate_manifest_prod
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: <+secrets.getValue("PROD_DB_HOST")>
                      - name: DB_USER
                        type: Secret
                        value: <+secrets.getValue("PROD_DB_USER")>
                      - name: DB_PASSWORD
                        type: Secret
                        value: <+secrets.getValue("PROD_DB_PASS")>
                      - name: TARGET_DB
                        type: Secret
                        value: <+secrets.getValue("PROD_DB_NAME")>
                      - name: GIT_BRANCH
                        value: <+pipeline.variables.GitBranch>
                    outputVariables:
                      - name: LIQUIBASE_JOB_NAME
                    command: |
                      cp liquibase/liquibase-job-template.yaml ci_manifest.yaml
                      sed -i "s|__DB_HOST__|${DB_HOST}|g" ci_manifest.yaml
                      sed -i "s|__DB_USER__|${DB_USER}|g" ci_manifest.yaml
                      sed -i "s|__DB_PASSWORD__|${DB_PASSWORD}|g" ci_manifest.yaml
                      sed -i "s|__TARGET_DB__|${TARGET_DB}|g" ci_manifest.yaml
                      sed -i "s|__GIT_BRANCH__|${GIT_BRANCH}|g" ci_manifest.yaml
                      if [ "<+pipeline.variables.OperationType>" = "rollback" ]; then
                        sed -i "s|__LIQUIBASE_COMMAND__|rollbackCount <+pipeline.variables.RollbackCount>|g" ci_manifest.yaml
                      else
                        sed -i "s|__LIQUIBASE_COMMAND__|update|g" ci_manifest.yaml
                      fi
                      JOB_NAME=$(yq e '.metadata.name' ci_manifest.yaml)
                      echo "LIQUIBASE_JOB_NAME=$JOB_NAME"
                      echo "export LIQUIBASE_JOB_NAME=$JOB_NAME" >> harness_env_export.sh

              - step:
                  name: Apply Liquibase Job Prod
                  identifier: apply_job_prod
                  type: K8sApply
                  spec:
                    filePaths:
                      - ci_manifest.yaml

              - step:
                  name: Cleanup Liquibase Job Prod
                  identifier: delete_job_prod
                  type: K8sDelete
                  spec:
                    deleteResources:
                      type: DeleteResourceName
                      spec:
                        resources:
                          - Job/<+step.generate_manifest_prod.output.LIQUIBASE_JOB_NAME>
                          
          failureStrategies:
            - onFailure:
                errors:
                  - AllErrors
                action:
                  type: StageRollback
