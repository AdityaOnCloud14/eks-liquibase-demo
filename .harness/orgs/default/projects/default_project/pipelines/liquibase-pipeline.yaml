pipeline:
  name: Liquibase Multi Env Pipeline
  identifier: Liquibase_Pipeline
  orgIdentifier: default
  projectIdentifier: default_project
  description: |
    Deploy or rollback Liquibase changes to Dev, Test and Prod EKS clusters,
    using per‑environment Harness Secrets for DB credentials and IRSA‑backed
    EKS connector. Each stage auto‑generates a K8s Job manifest, runs it,
    then always cleans up.

  repo:
    connectorRef: github_connector        # your Harness GitHub connector
    repositoryName: AdityaOnCloud14/eks-liquibase-demo
    branch: main
    repoRoot: .

  variables:
    - name: operation
      type: String
      default: update
      allowedValues:
        - update
        - rollbackCount
    - name: rollbackCount
      type: Number
      default: 1
    - name: target_db
      type: String
      default: demo_db

  stages:
    # ────────── DEV ──────────
    - stage:
        name: Dev
        identifier: Dev
        type: Deployment
        spec:
          deploymentType: Kubernetes
          failureStrategies:
            - onFailure:
                action:
                  type: Ignore
          service:
            serviceRef: liquibase_service
          environment:
            environmentRef: dev
            infrastructureDefinitions:
              - identifier: eks_connector
          execution:
            steps:
              - step:
                  name: Generate Manifest Dev
                  identifier: genManifestDev
                  type: ShellScript
                  spec:
                    shell: Bash
                    environmentVariables:
                      - name: DB_HOST
                        type: SecretRef
                        value: <+secrets.getValue("dev_db_host")>
                      - name: DB_NAME
                        type: Text
                        value: <+pipeline.variables.target_db>
                      - name: DB_USER
                        type: SecretRef
                        value: <+secrets.getValue("dev_db_user")>
                      - name: DB_PASS
                        type: SecretRef
                        value: <+secrets.getValue("dev_db_pass")>
                    source:
                      type: Inline
                      spec:
                        script: |
                          cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                          sed -i "s|__DB_HOST__|$DB_HOST|g" ci_manifest.yaml
                          sed -i "s|__TARGET_DB__|$DB_NAME|g" ci_manifest.yaml
                          sed -i "s|__DB_USER__|$DB_USER|g" ci_manifest.yaml
                          sed -i "s|__DB_PASS__|$DB_PASS|g" ci_manifest.yaml
                          if [ "${operation}" = "rollbackCount" ]; then
                            cmd="rollbackCount ${rollbackCount}"
                          else
                            cmd="update"
                          fi
                          sed -i "s|__LIQUIBASE_COMMAND__|$cmd|g" ci_manifest.yaml

              - step:
                  name: Deploy Job Dev
                  identifier: deployJobDev
                  type: ShellScript
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      spec:
                        script: |
                          aws eks update-kubeconfig --name my-lb-initcluster --region us-east-1
                          kubectl apply -f ci_manifest.yaml -n liquibase-demo
                          kubectl wait --for=condition=complete job/liquibase-job \
                            -n liquibase-demo --timeout=300s
                          POD=$(kubectl get pods -n liquibase-demo \
                            -l job-name=liquibase-job -o jsonpath="{.items[0].metadata.name}")
                          echo "Liquibase Job Logs (Dev):"
                          kubectl logs $POD -n liquibase-demo

              - step:
                  name: Cleanup Job Dev
                  identifier: cleanupJobDev
                  type: ShellScript
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      spec:
                        script: |
                          kubectl delete job liquibase-job -n liquibase-demo || true

    # ────────── TEST ──────────
    - stage:
        name: Test
        identifier: Test
        type: Deployment
        spec:
          deploymentType: Kubernetes
          failureStrategies:
            - onFailure:
                action:
                  type: Ignore
          service:
            serviceRef: liquibase_service
          environment:
            environmentRef: test
            infrastructureDefinitions:
              - identifier: eks_connector
          execution:
            steps:
              - step:
                  name: Approve Test
                  identifier: approveTest
                  type: HarnessApproval
                  spec:
                    approvalMessage: "Approve deployment to TEST?"
                    approvers:
                      userGroups: ["_account_all_users"]
                    timeout: 2h

              - step:
                  name: Generate Manifest Test
                  identifier: genManifestTest
                  type: ShellScript
                  spec:
                    shell: Bash
                    environmentVariables:
                      - name: DB_HOST
                        type: SecretRef
                        value: <+secrets.getValue("test_db_host")>
                      - name: DB_NAME
                        type: Text
                        value: <+pipeline.variables.target_db>
                      - name: DB_USER
                        type: SecretRef
                        value: <+secrets.getValue("test_db_user")>
                      - name: DB_PASS
                        type: SecretRef
                        value: <+secrets.getValue("test_db_pass")>
                    source:
                      type: Inline
                      spec:
                        script: |
                          cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                          sed -i "s|__DB_HOST__|$DB_HOST|g" ci_manifest.yaml
                          sed -i "s|__TARGET_DB__|$DB_NAME|g" ci_manifest.yaml
                          sed -i "s|__DB_USER__|$DB_USER|g" ci_manifest.yaml
                          sed -i "s|__DB_PASS__|$DB_PASS|g" ci_manifest.yaml
                          if [ "${operation}" = "rollbackCount" ]; then
                            cmd="rollbackCount ${rollbackCount}"
                          else
                            cmd="update"
                          fi
                          sed -i "s|__LIQUIBASE_COMMAND__|$cmd|g" ci_manifest.yaml

              - step:
                  name: Deploy Job Test
                  identifier: deployJobTest
                  type: ShellScript
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      spec:
                        script: |
                          aws eks update-kubeconfig --name my-lb-initcluster --region us-east-1
                          kubectl apply -f ci_manifest.yaml -n liquibase-demo
                          kubectl wait --for=condition=complete job/liquibase-job \
                            -n liquibase-demo --timeout=300s
                          POD=$(kubectl get pods -n liquibase-demo \
                            -l job-name=liquibase-job -o jsonpath="{.items[0].metadata.name}")
                          echo "Liquibase Job Logs (Test):"
                          kubectl logs $POD -n liquibase-demo

              - step:
                  name: Cleanup Job Test
                  identifier: cleanupJobTest
                  type: ShellScript
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      spec:
                        script: |
                          kubectl delete job liquibase-job -n liquibase-demo || true

    # ────────── PROD ──────────
    - stage:
        name: Prod
        identifier: Prod
        type: Deployment
        spec:
          deploymentType: Kubernetes
          failureStrategies:
            - onFailure:
                action:
                  type: Ignore
          service:
            serviceRef: liquibase_service
          environment:
            environmentRef: prod
            infrastructureDefinitions:
              - identifier: eks_connector
          execution:
            steps:
              - step:
                  name: Approve Prod
                  identifier: approveProd
                  type: HarnessApproval
                  spec:
                    approvalMessage: "Approve deployment to PROD?"
                    approvers:
                      userGroups: ["_account_all_users"]
                    timeout: 4h

              - step:
                  name: Generate Manifest Prod
                  identifier: genManifestProd
                  type: ShellScript
                  spec:
                    shell: Bash
                    environmentVariables:
                      - name: DB_HOST
                        type: SecretRef
                        value: <+secrets.getValue("prod_db_host")>
                      - name: DB_NAME
                        type: Text
                        value: <+pipeline.variables.target_db>
                      - name: DB_USER
                        type: SecretRef
                        value: <+secrets.getValue("prod_db_user")>
                      - name: DB_PASS
                        type: SecretRef
                        value: <+secrets.getValue("prod_db_pass")>
                    source:
                      type: Inline
                      spec:
                        script: |
                          cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                          sed -i "s|__DB_HOST__|$DB_HOST|g" ci_manifest.yaml
                          sed -i "s|__TARGET_DB__|$DB_NAME|g" ci_manifest.yaml
                          sed -i "s|__DB_USER__|$DB_USER|g" ci_manifest.yaml
                          sed -i "s|__DB_PASS__|$DB_PASS|g" ci_manifest.yaml
                          if [ "${operation}" = "rollbackCount" ]; then
                            cmd="rollbackCount ${rollbackCount}"
                          else
                            cmd="update"
                          fi
                          sed -i "s|__LIQUIBASE_COMMAND__|$cmd|g" ci_manifest.yaml

              - step:
                  name: Deploy Job Prod
                  identifier: deployJobProd
                  type: ShellScript
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      spec:
                        script: |
                          aws eks update-kubeconfig --name my-lb-initcluster --region us-east-1
                          kubectl apply -f ci_manifest.yaml -n liquibase-demo
                          kubectl wait --for=condition=complete job/liquibase-job \
                            -n liquibase-demo --timeout=300s
                          POD=$(kubectl get pods -n liquibase-demo \
                            -l job-name=liquibase-job -o jsonpath="{.items[0].metadata.name}")
                          echo "Liquibase Job Logs (Prod):"
                          kubectl logs $POD -n liquibase-demo

              - step:
                  name: Cleanup Job Prod
                  identifier: cleanupJobProd
                  type: ShellScript
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      spec:
                        script: |
                          kubectl delete job liquibase-job -n liquibase-demo || true
