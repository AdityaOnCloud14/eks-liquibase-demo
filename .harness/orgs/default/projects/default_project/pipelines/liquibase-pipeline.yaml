pipeline:
  name: Liquibase Deployment Pipeline
  identifier: LiquibaseDeploymentPipeline
  orgIdentifier: default
  projectIdentifier: default_project

  # ← tell Harness where to pull this YAML from
  repo:
    connectorRef: github_conenctor
    repositoryName: AdityaOnCloud14/eks-liquibase-demo
    branch: main
    repoRoot: .

  variables:
    - name: OperationType
      type: String
      description: Liquibase operation (“update” or “rollback”)
      default: update
      allowedValues:
        - update
        - rollback
    - name: RollbackCount
      type: Number
      description: How many changesets to rollback (if rollback)
      default: 1
    - name: GitBranch
      type: String
      description: Git branch where your template lives
      default: main

  stages:
    # ─────────── DEV ───────────
    - stage:
        name: DevDatabaseMigration
        identifier: Dev
        type: Deployment
        spec:
          deploymentType: Kubernetes

          service:
            serviceRef: liquibase_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: LiquibaseJobTemplate
                        type: KubernetesManifest
                        spec:
                          store:
                            type: Git
                            spec:
                              connectorRef: github_conenctor
                              gitFetchType: Branch
                              branch: "<+pipeline.variables.GitBranch>"
                              paths:
                                - manifests/liquibase-job-template.yaml
                          skipResourceVersioning: true

          environment:
            environmentRef: dev
            deployToAll: false
            infrastructureDefinitions:
              - identifier: eks_connector

          execution:
            steps:

              # 1) Render the Job manifest
              - step:
                  name: GenerateManifestDev
                  identifier: GenerateManifestDev
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: "<+secrets.getValue(\"DB_HOST\")>"
                      - name: DB_USER
                        type: Secret
                        value: "<+secrets.getValue(\"DB_USER\")>"
                      - name: DB_PASS
                        type: Secret
                        value: "<+secrets.getValue(\"DB_PASS\")>"
                      - name: TARGET_DB
                        type: Secret
                        value: "<+secrets.getValue(\"DB_NAME\")>"
                      - name: GIT_BRANCH
                        type: String
                        value: "<+pipeline.variables.GitBranch>"
                    source:
                      type: Inline
                      spec:
                        script: |-
                          cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                          sed -i "s|__DB_HOST__|$DB_HOST|g" ci_manifest.yaml
                          sed -i "s|__DB_USER__|$DB_USER|g" ci_manifest.yaml
                          sed -i "s|__DB_PASSWORD__|$DB_PASS|g" ci_manifest.yaml
                          sed -i "s|__TARGET_DB__|$TARGET_DB|g" ci_manifest.yaml
                          sed -i "s|__GIT_BRANCH__|$GIT_BRANCH|g" ci_manifest.yaml
                          if [ "<+pipeline.variables.OperationType>" = "rollback" ]; then
                            sed -i "s|__LIQUIBASE_COMMAND__|rollbackCount <+pipeline.variables.RollbackCount>|g" ci_manifest.yaml
                          else
                            sed -i "s|__LIQUIBASE_COMMAND__|update|g" ci_manifest.yaml
                          fi
                          # capture the generated Job name
                          JOB=$(yq e '.metadata.name' ci_manifest.yaml)
                          echo "LIQUIBASE_JOB_NAME=$JOB"
                          echo "export LIQUIBASE_JOB_NAME=$JOB" >> harness_env_export.sh

              # 2) Apply the Job
              - step:
                  name: ApplyJobDev
                  identifier: ApplyJobDev
                  type: K8sApply
                  spec:
                    filePaths:
                      - ci_manifest.yaml
                    skipDryRun: false
                    skipSteadyStateCheck: false

              # 3) Always delete the Job afterwards
              - step:
                  name: CleanupJobDev
                  identifier: CleanupJobDev
                  type: K8sDelete
                  when:
                    stageStatus: All
                  spec:
                    deleteResources:
                      type: ResourceName
                      spec:
                        resources:
                          - "Job/<+step.GenerateManifestDev.output.LIQUIBASE_JOB_NAME>"

          failureStrategies:
            - onFailure:
                errors: [AllErrors]
                action:
                  type: Abort


    # ─────────── TEST ───────────
    - stage:
        name: TestDatabaseMigration
        identifier: Test
        type: Deployment
        spec:
          deploymentType: Kubernetes

          service:
            serviceRef: liquibase_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: LiquibaseJobTemplate
                        type: KubernetesManifest
                        spec:
                          store:
                            type: Git
                            spec:
                              connectorRef: github_conenctor
                              gitFetchType: Branch
                              branch: "<+pipeline.variables.GitBranch>"
                              paths:
                                - manifests/liquibase-job-template.yaml
                          skipResourceVersioning: true

          environment:
            environmentRef: test
            deployToAll: false
            infrastructureDefinitions:
              - identifier: eks_connector

          execution:
            steps:

              - step:
                  name: GenerateManifestTest
                  identifier: GenerateManifestTest
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: "<+secrets.getValue(\"TEST_DB_HOST\")>"
                      - name: DB_USER
                        type: Secret
                        value: "<+secrets.getValue(\"TEST_DB_USER\")>"
                      - name: DB_PASS
                        type: Secret
                        value: "<+secrets.getValue(\"TEST_DB_PASS\")>"
                      - name: TARGET_DB
                        type: Secret
                        value: "<+secrets.getValue(\"TEST_DB_NAME\")>"
                      - name: GIT_BRANCH
                        type: String
                        value: "<+pipeline.variables.GitBranch>"
                    source:
                      type: Inline
                      spec:
                        script: |-
                          cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                          sed -i "s|__DB_HOST__|$DB_HOST|g" ci_manifest.yaml
                          sed -i "s|__DB_USER__|$DB_USER|g" ci_manifest.yaml
                          sed -i "s|__DB_PASSWORD__|$DB_PASS|g" ci_manifest.yaml
                          sed -i "s|__TARGET_DB__|$TARGET_DB|g" ci_manifest.yaml
                          sed -i "s|__GIT_BRANCH__|$GIT_BRANCH|g" ci_manifest.yaml
                          if [ "<+pipeline.variables.OperationType>" = "rollback" ]; then
                            sed -i "s|__LIQUIBASE_COMMAND__|rollbackCount <+pipeline.variables.RollbackCount>|g" ci_manifest.yaml
                          else
                            sed -i "s|__LIQUIBASE_COMMAND__|update|g" ci_manifest.yaml
                          fi
                          JOB=$(yq e '.metadata.name' ci_manifest.yaml)
                          echo "LIQUIBASE_JOB_NAME=$JOB"
                          echo "export LIQUIBASE_JOB_NAME=$JOB" >> harness_env_export.sh

              - step:
                  name: ApplyJobTest
                  identifier: ApplyJobTest
                  type: K8sApply
                  spec:
                    filePaths:
                      - ci_manifest.yaml
                    skipDryRun: false
                    skipSteadyStateCheck: false

              - step:
                  name: CleanupJobTest
                  identifier: CleanupJobTest
                  type: K8sDelete
                  when:
                    stageStatus: All
                  spec:
                    deleteResources:
                      type: ResourceName
                      spec:
                        resources:
                          - "Job/<+step.GenerateManifestTest.output.LIQUIBASE_JOB_NAME>"

          failureStrategies:
            - onFailure:
                errors: [AllErrors]
                action:
                  type: Abort


    # ─────────── PROD ───────────
    - stage:
        name: ProdDatabaseMigration
        identifier: Prod
        type: Deployment
        spec:
          deploymentType: Kubernetes

          service:
            serviceRef: liquibase_service
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: LiquibaseJobTemplate
                        type: KubernetesManifest
                        spec:
                          store:
                            type: Git
                            spec:
                              connectorRef: github_conenctor
                              gitFetchType: Branch
                              branch: "<+pipeline.variables.GitBranch>"
                              paths:
                                - manifests/liquibase-job-template.yaml
                          skipResourceVersioning: true

          environment:
            environmentRef: prod
            deployToAll: false
            infrastructureDefinitions:
              - identifier: eks_connector

          execution:
            steps:

              - step:
                  name: GenerateManifestProd
                  identifier: GenerateManifestProd
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    environmentVariables:
                      - name: DB_HOST
                        type: Secret
                        value: "<+secrets.getValue(\"PROD_DB_HOST\")>"
                      - name: DB_USER
                        type: Secret
                        value: "<+secrets.getValue(\"PROD_DB_USER\")>"
                      - name: DB_PASS
                        type: Secret
                        value: "<+secrets.getValue(\"PROD_DB_PASS\")>"
                      - name: TARGET_DB
                        type: Secret
                        value: "<+secrets.getValue(\"PROD_DB_NAME\")>"
                      - name: GIT_BRANCH
                        type: String
                        value: "<+pipeline.variables.GitBranch>"
                    source:
                      type: Inline
                      spec:
                        script: |-
                          cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                          sed -i "s|__DB_HOST__|$DB_HOST|g" ci_manifest.yaml
                          sed -i "s|__DB_USER__|$DB_USER|g" ci_manifest.yaml
                          sed -i "s|__DB_PASSWORD__|$DB_PASS|g" ci_manifest.yaml
                          sed -i "s|__TARGET_DB__|$TARGET_DB|g" ci_manifest.yaml
                          sed -i "s|__GIT_BRANCH__|$GIT_BRANCH|g" ci_manifest.yaml
                          if [ "<+pipeline.variables.OperationType>" = "rollback" ]; then
                            sed -i "s|__LIQUIBASE_COMMAND__|rollbackCount <+pipeline.variables.RollbackCount>|g" ci_manifest.yaml
                          else
                            sed -i "s|__LIQUIBASE_COMMAND__|update|g" ci_manifest.yaml
                          fi
                          JOB=$(yq e '.metadata.name' ci_manifest.yaml)
                          echo "LIQUIBASE_JOB_NAME=$JOB"
                          echo "export LIQUIBASE_JOB_NAME=$JOB" >> harness_env_export.sh

              - step:
                  name: ApplyJobProd
                  identifier: ApplyJobProd
                  type: K8sApply
                  spec:
                    filePaths:
                      - ci_manifest.yaml
                    skipDryRun: false
                    skipSteadyStateCheck: false

              - step:
                  name: CleanupJobProd
                  identifier: CleanupJobProd
                  type: K8sDelete
                  when:
                    stageStatus: All
                  spec:
                    deleteResources:
                      type: ResourceName
                      spec:
                        resources:
                          - "Job/<+step.GenerateManifestProd.output.LIQUIBASE_JOB_NAME>"

          failureStrategies:
            - onFailure:
                errors: [AllErrors]
                action:
                  type: Abort
