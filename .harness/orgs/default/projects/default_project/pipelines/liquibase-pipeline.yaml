pipeline:
  name: Liquibase Multi‑Env Pipeline
  identifier: Liquibase_MultiEnv_Pipeline
  orgIdentifier: default
  projectIdentifier: default_project
  description: |
    Deploy or rollback Liquibase changes to Dev, Test and Prod EKS clusters,
    using per‑environment Harness Secrets for DB credentials and an IRSA‑backed
    EKS connector. Each stage generates a K8s Job from a shared template, runs it,
    then always cleans up.

  repo:
    connectorRef: github_conenctor        # your GitHub connector
    repositoryName: AdityaOnCloud14/eks-liquibase-demo
    branch: main
    repoRoot: .

  variables:
    - name: operation
      type: String
      default: update
      allowedValues: [update, rollbackCount]

    - name: rollbackCount
      type: String
      default: "1"

    - name: target_db
      type: String
      default: demo_db

  stages:
    # ────────── DEV ──────────
    - stage:
        name: Dev
        identifier: Dev
        type: Deployment
        spec:
          deploymentType: Kubernetes

          service:
            serviceRef: liquibase_service

          environment:
            environmentRef: dev

          infrastructure:
            infrastructureDefinition:
              connectorRef: eks_connector
              namespace: liquibase-demo
              type: KubernetesDirect

          execution:
            steps:
              # 1) Generate the manifest
              - step:
                  name: GenManifestDev
                  identifier: GenManifestDev
                  type: ShellScript
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      script: |
                        cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                        sed -i "s|__DB_HOST__|<+secrets.getValue(\"DEV_DB_HOST\")>|g"     ci_manifest.yaml
                        sed -i "s|__TARGET_DB__|${target_db}|g"                          ci_manifest.yaml
                        sed -i "s|__DB_USER__|<+secrets.getValue(\"DEV_DB_USER\")>|g"     ci_manifest.yaml
                        sed -i "s|__DB_PASS__|<+secrets.getValue(\"DEV_DB_PASS\")>|g"     ci_manifest.yaml
                        if [ "${operation}" = "rollbackCount" ]; then
                          cmd="rollbackCount ${rollbackCount}"
                        else
                          cmd="update"
                        fi
                        sed -i "s|__LIQUIBASE_COMMAND__|$cmd|g"                          ci_manifest.yaml

              # 2) Apply & wait for completion
              - step:
                  name: DeployDev
                  identifier: DeployDev
                  type: ShellScript
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      script: |
                        aws eks update-kubeconfig \
                          --name my-lb-initcluster \
                          --region us-east-1
                        kubectl apply -f ci_manifest.yaml -n liquibase-demo
                        kubectl wait --for=condition=complete job/liquibase-job \
                          -n liquibase-demo --timeout=300s
                        POD=$(kubectl get pods -n liquibase-demo \
                          -l job-name=liquibase-job \
                          -o jsonpath="{.items[0].metadata.name}")
                        echo "── Liquibase Job Logs (Dev) ──"
                        kubectl logs "$POD" -n liquibase-demo

              # 3) Cleanup (always)
              - step:
                  name: CleanupDev
                  identifier: CleanupDev
                  type: ShellScript
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      script: |
                        kubectl delete job liquibase-job -n liquibase-demo || true

          failureStrategies:
            - onFailure:
                action:
                  type: Continue

    # ────────── TEST ──────────
    - stage:
        name: Test
        identifier: Test
        type: Deployment
        spec:
          deploymentType: Kubernetes

          service:
            serviceRef: liquibase_service

          environment:
            environmentRef: test

          infrastructure:
            infrastructureDefinition:
              connectorRef: eks_connector
              namespace: liquibase-demo
              type: KubernetesDirect

          execution:
            steps:
              - step:
                  name: ApproveTest
                  identifier: ApproveTest
                  type: HarnessApproval
                  spec:
                    approvalMessage: "Approve deployment to TEST?"
                    approvers:
                      userGroups: ["_account_all_users"]
                    timeout: 2h

              - step:
                  name: GenManifestTest
                  identifier: GenManifestTest
                  type: ShellScript
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      script: |
                        cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                        sed -i "s|__DB_HOST__|<+secrets.getValue(\"TEST_DB_HOST\")>|g"   ci_manifest.yaml
                        sed -i "s|__TARGET_DB__|${target_db}|g"                         ci_manifest.yaml
                        sed -i "s|__DB_USER__|<+secrets.getValue(\"TEST_DB_USER\")>|g"   ci_manifest.yaml
                        sed -i "s|__DB_PASS__|<+secrets.getValue(\"TEST_DB_PASS\")>|g"   ci_manifest.yaml
                        if [ "${operation}" = "rollbackCount" ]; then
                          cmd="rollbackCount ${rollbackCount}"
                        else
                          cmd="update"
                        fi
                        sed -i "s|__LIQUIBASE_COMMAND__|$cmd|g"                          ci_manifest.yaml

              - step:
                  name: DeployTest
                  identifier: DeployTest
                  type: ShellScript
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      script: |
                        aws eks update-kubeconfig \
                          --name my-lb-initcluster \
                          --region us-east-1
                        kubectl apply -f ci_manifest.yaml -n liquibase-demo
                        kubectl wait --for=condition=complete job/liquibase-job \
                          -n liquibase-demo --timeout=300s
                        POD=$(kubectl get pods -n liquibase-demo \
                          -l job-name=liquibase-job \
                          -o jsonpath="{.items[0].metadata.name}")
                        echo "── Liquibase Job Logs (Test) ──"
                        kubectl logs "$POD" -n liquibase-demo

              - step:
                  name: CleanupTest
                  identifier: CleanupTest
                  type: ShellScript
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      script: |
                        kubectl delete job liquibase-job -n liquibase-demo || true

          failureStrategies:
            - onFailure:
                action:
                  type: Continue

    # ────────── PROD ──────────
    - stage:
        name: Prod
        identifier: Prod
        type: Deployment
        spec:
          deploymentType: Kubernetes

          service:
            serviceRef: liquibase_service

          environment:
            environmentRef: prod

          infrastructure:
            infrastructureDefinition:
              connectorRef: eks_connector
              namespace: liquibase-demo
              type: KubernetesDirect

          execution:
            steps:
              - step:
                  name: ApproveProd
                  identifier: ApproveProd
                  type: HarnessApproval
                  spec:
                    approvalMessage: "Approve deployment to PROD?"
                    approvers:
                      userGroups: ["_account_all_users"]
                    timeout: 4h

              - step:
                  name: GenManifestProd
                  identifier: GenManifestProd
                  type: ShellScript
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      script: |
                        cp manifests/liquibase-job-template.yaml ci_manifest.yaml
                        sed -i "s|__DB_HOST__|<+secrets.getValue(\"PROD_DB_HOST\")>|g"  ci_manifest.yaml
                        sed -i "s|__TARGET_DB__|${target_db}|g"                        ci_manifest.yaml
                        sed -i "s|__DB_USER__|<+secrets.getValue(\"PROD_DB_USER\")>|g"  ci_manifest.yaml
                        sed -i "s|__DB_PASS__|<+secrets.getValue(\"PROD_DB_PASS\")>|g"  ci_manifest.yaml
                        if [ "${operation}" = "rollbackCount" ]; then
                          cmd="rollbackCount ${rollbackCount}"
                        else
                          cmd="update"
                        fi
                        sed -i "s|__LIQUIBASE_COMMAND__|$cmd|g"                          ci_manifest.yaml

              - step:
                  name: DeployProd
                  identifier: DeployProd
                  type: ShellScript
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      script: |
                        aws eks update-kubeconfig \
                          --name my-lb-initcluster \
                          --region us-east-1
                        kubectl apply -f ci_manifest.yaml -n liquibase-demo
                        kubectl wait --for=condition=complete job/liquibase-job \
                          -n liquibase-demo --timeout=300s
                        POD=$(kubectl get pods -n liquibase-demo \
                          -l job-name=liquibase-job \
                          -o jsonpath="{.items[0].metadata.name}")
                        echo "── Liquibase Job Logs (Prod) ──"
                        kubectl logs "$POD" -n liquibase-demo

              - step:
                  name: CleanupProd
                  identifier: CleanupProd
                  type: ShellScript
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      script: |
                        kubectl delete job liquibase-job -n liquibase-demo || true

          failureStrategies:
            - onFailure:
                action:
                  type: Continue
